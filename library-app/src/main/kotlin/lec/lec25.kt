package lec

// 섹션4. 두 번째 요구사항 추가하기 - 도서 대출 현황
// 1. join 쿼리의 종류와 차이점을 이해한다.
// 2. JPA N+1 문제가 무엇이고 발생하는 원인을 이해한다.
// 3. N+1 문제를 해결하기 위한 방법을 이해하고 활용할 수 있다.
// 4. 새로운 API를 만들 때 생길 수 있는 고민 포인트를 이해하고 적절한 감을 잡을 수 있다.


// 25강. 유저 대출 현황 보여주기 - 프로덕션 코드 개발
// 1. 유저 대출 현황을 보여준다.
// 2. 과거에 대출했던 기록과 현재 대출 중인 기록을 보여준다.
// 3. 아무런 기록이 없는 유져도 화면에 보여져야 한다.

// 현재 Client는 진작 개발되어 있다.
// - 때문에 API 스펙도 정해져 있고, 우리는 이 스펙에 맞추어 서버 개발을 하면 된다!
// - API URL : GET /user/loan
// - 요청 : 파라미터 없음.
// - 응답
// [{
//   "name": String,
//   "books": [
//     "name": String,
//     "isReturn": Boolean
//   ]
// }, ...]

// 새로운 API를 만들 때 코드의 위치를 어떻게 해야 할까?
// 1. 새로운 Controller를 만들어야 할까?
// 2. 기존의 Controller에 추가해야 할까?
// 3. 기존의 Controller에 추가한다면 어떤 Controller에 추가해야 할까?

// Controller를 구분하는 3가지 기준
// 1. 화면에서 사용되는 API끼리 모아둔다.
// - 장점 : 화면에서 어떤 API가 사용되는지 한 눈에 알기 용이하다.
// - 단점 : 한 API가 여러 화면에서 사용되면 위치가 애매하다.
// -       서버 코드가 화면에 종속적이다.
// 2. 동일한 도메인끼리 API를 모아 둔다.
// - 장점 : 화면 위치와 무관하게 서버 코드는 변경되지 않아도 된다.
// -       비슷한 API끼리 모이게 되며, 코드의 위치를 예측할 수 있다.
// - 단점 : 이 API가 어디서 사용되는지 서버 코드만 보고 알기는 어렵다.
// 3. (간혹) 하나의 API에 하나의 Controller만 사용한다.
// - 장점 : 화면 위치와 무관하게 서버 코드는 변경되지 않아도 된다.
// - 단점 : 이 API가 어디서 사용되는지 서버 코드만 보고 알기는 어렵다.

// 프로젝트가 낯선 사람 입장에서 어떤 기능에 대한 코드가 어디 있는지 찾을 수 있는 것이 중요.

// Controller를 찾을 수 있는 몇 가지 방법(전제: API를 알고 있다.)
// 1. 인텔리제이의 전체검색으로 url을 검색
// - /user를 검색
// 2. URL들을 모아두기
// 3. 인텔리제이의 endpoints 기능